package com.lsp.pub.service;

 
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.regex.Pattern;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.fastjson.JSONObject;
import com.aliyun.oss.internal.ResponseParsers.GetBucketLifecycleResponseParser;
import com.lsp.integral.entity.InteProstore;
import com.lsp.pub.dao.BaseDao;
import com.lsp.pub.db.MongoDbUtil;
import com.lsp.pub.db.MongoSequence;
import com.lsp.pub.entity.BtcChangerate;
import com.lsp.pub.entity.EthChangerate;
import com.lsp.pub.entity.Exchangerate;
import com.lsp.pub.entity.GetAllFunc;
import com.lsp.pub.entity.HttpClient;
import com.lsp.pub.entity.PadaChangerate;
import com.lsp.pub.entity.PubConstants;
import com.lsp.pub.util.BaseDate;
import com.lsp.pub.util.BaseDecimal;
import com.lsp.pub.util.DateFormat;
import com.lsp.pub.util.DateUtil;
import com.lsp.pub.util.Struts2Utils;
import com.lsp.pub.util.SysConfig;
import com.lsp.pub.util.UniObject;
import com.lsp.shop.entiy.OrderForm;
import com.lsp.shop.entiy.ShopMb;
import com.lsp.suc.entity.IntegralInfo;
import com.lsp.suc.entity.IntegralRecord;
import com.lsp.suc.entity.Ranking;
import com.lsp.website.service.WwzService;
import com.mongodb.BasicDBList;
import com.mongodb.BasicDBObject;
import com.mongodb.DBObject;
import com.mongodb.QueryOperators;
 
/**
 * 定时任务
 * @author lsp
 *
 */
public class TimerService {
	/** LOG4J对象 */
	private static Logger logger = LoggerFactory.getLogger(TimerService.class);

	private static TimerService timerService;
	@Autowired
	private BaseDao baseDao; 
	private MongoSequence mongoSequence;	
	@Autowired
	private WwzService  wwzservice; 
	 
	@Autowired
	public void setMongoSequence(MongoSequence mongoSequence) {
		this.mongoSequence = mongoSequence;
	}
    /**
	 * 服务类实例化
	 * 
	 * @return CzrzService
	 */
	public synchronized static TimerService getInstance() {
		if (timerService == null) {
			timerService = new TimerService();
		}
		return timerService;
	} 
	/**
	 * 每日返还
	 * @throws Exception 
	 */
	public synchronized void updProstore() throws Exception{
		System.out.println("进入这个方法1");
		if(wwzservice==null){
			wwzservice=new WwzService();
		}
		MongoDbUtil mongoDbUtil=new MongoDbUtil();
		HashMap<String, Object>sortMap=new HashMap<String, Object>();
		HashMap<String, Object>whereMap=new HashMap<String, Object>();
		BasicDBObject dateCondition1 = new BasicDBObject();
		dateCondition1.append("$lte", DateUtil.addHour(new Date(), -22));
		whereMap.put("createdate", dateCondition1);
		sortMap.put("createdate", -1);
		BasicDBObject dateCondition = new BasicDBObject();
		dateCondition.append("$gte",new Date());
		whereMap.put("enddate", dateCondition);
		whereMap.put("state", 0);
//		
//		String  pbno=SysConfig.getProperty("pbno");
//		if(pbno!=null){
//			 BasicDBList   dblist=new BasicDBList();  
//			 String[]lsno=pbno.split(",");
//			 for (String string : lsno) {
//				 System.out.println(string);
//	            if(StringUtils.isNotEmpty(string)){
//	            	BasicDBObject dat=new BasicDBObject(); 
//	            	String noid=wwzservice.getfromUseridVipNo(string);
//	            	if(StringUtils.isNotEmpty(noid)){
//	            		dat.put("fromUserid",new BasicDBObject("$ne",noid));
//		            	dblist.add(dat);
//	            	}
//	            	
//	            }			 
//				
//			}
//			 System.out.println(dblist);
//			whereMap.put("$and", dblist); 
//			 
//		} 
		List<DBObject>list=mongoDbUtil.queryAll(PubConstants.INTEGRAL_PROSTORE,whereMap, sortMap).toArray(); 
		String ppbprice=wwzservice.getPPBSprice()+""; 
		for (DBObject dbObject : list) {
			System.out.println(dbObject.toString());
			if(dbObject.get("money")!=null){
				String price = "0"; 
				
				if(dbObject.get("money")!=null&&dbObject.get("time")!=null&&Integer.parseInt(dbObject.get("time").toString())>0) { 
            		price = BaseDecimal.division(dbObject.get("money").toString(),dbObject.get("time").toString(),6);
            	}else {
            		price = BaseDecimal.division("0","1",6);
            	}
				double kjlx=0;
				HashMap<String, Object>where1Map=new HashMap<>();
	    		whereMap.put("custid",SysConfig.getProperty("custid"));
	    		whereMap.put("fromUserid", dbObject.get("fromUserid").toString());
	    		IntegralRecord ir = null;
				DBObject db = mongoDbUtil.findOne(PubConstants.SUC_INTEGRALRECORD, where1Map);
				if(db!=null){
					ir=(IntegralRecord) UniObject.DBObjectToObject(db, IntegralRecord.class);
					kjlx=ir.getKjlx(); 
					
				} 
				String jzprice=price;
				String bprice="0";
				if(kjlx>=0){
					if(kjlx==1){
						price=BaseDecimal.division(price,ppbprice,10);
						bprice=ppbprice;
					}else if(kjlx==2){
						price=BaseDecimal.division(price,wwzservice.getBTCSprice()+"",20);
						bprice=wwzservice.getBTCSprice()+"";
					}else if(kjlx==3){
						price=BaseDecimal.division(price,wwzservice.getETHSprice()+"",20); 
						bprice=wwzservice.getETHSprice()+"";
					}else{
						price=BaseDecimal.division(price,ppbprice,10);
						bprice=ppbprice;
					}  
					if(dbObject.get("fromUserid")!=null&&dbObject.get("type")!=null){
						
						//验证每日返
						HashMap<String, Object>wherewMap=new HashMap<>();
						wherewMap.put("fromUserid", dbObject.get("fromUserid").toString());
						wherewMap.put("type", dbObject.get("type").toString());
						wherewMap.put("fid", dbObject.get("_id").toString());
						wherewMap.put("insdate",DateFormat.getDate());
						Long count=baseDao.getCount(PubConstants.INTEGRAL_INFO, wherewMap); 
						if(count==0){
							if(dbObject.get("type").toString().equals("ps_account")||dbObject.get("type").toString().equals("ps_recovery")){
								//挖矿到矿机账号 
								wwzservice.addyfjf(price, dbObject.get("fromUserid").toString(), dbObject.get("type").toString(), SysConfig.getProperty("custid"),1,dbObject.get("_id").toString(), jzprice,bprice);
								
							}else{
								wwzservice.addyfjf(price, dbObject.get("fromUserid").toString(), dbObject.get("type").toString(), SysConfig.getProperty("custid"),1,dbObject.get("_id").toString(), jzprice,bprice);
							}  
							DBObject user=wwzservice.getCustUser(dbObject.get("fromUserid").toString());
						    if(user!=null&&user.get("renumber")!=null&&dbObject.get("type").toString().equals("shop_bmzt")&&StringUtils.isNotEmpty(wwzservice.getfromUseridVipNo(dbObject.get("renumber").toString()))) {
						    	wwzservice.addyfjf(BaseDecimal.multiplication(price, "0.1"),wwzservice.getfromUseridVipNo(dbObject.get("renumber").toString()),"kj_tjsy", SysConfig.getProperty("custid"),1,dbObject.get("_id").toString(), BaseDecimal.multiplication(jzprice, "0.1"),bprice);
						    }
							
						} 
						
					}
				}
			
			}
		}
	}
	/**
	 * 更新汇率（每半小时一次）
	 */
	public synchronized void updaterate(){
		System.out.println("更新汇率");
		//更新btc
		String str=HttpClient.sendGet("https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=CNY");
    	if(StringUtils.isNotEmpty(str)){
    		JSONObject json=JSONObject.parseObject(str);
        	if(json.get("CNY")!=null) {
        		//存储
        		BtcChangerate btcChangerate=new BtcChangerate();
        		btcChangerate.set_id(mongoSequence.currval(PubConstants.PUB_BTCCHANGERATE));
        		btcChangerate.setType("CNY_BTC");
        		btcChangerate.setUpddate(new Date());
        		btcChangerate.setValue(json.get("CNY").toString()); 
        		baseDao.insert(PubConstants.PUB_BTCCHANGERATE,btcChangerate);
        		GetAllFunc.btcarate.put(SysConfig.getProperty("custid"),btcChangerate);
        	};
    	}
    	
    	
    	//更新rmb
		str=HttpClient.sendGet(SysConfig.getProperty("cny_price_api"));
		if(StringUtils.isNotEmpty(str)){
			JSONObject json=JSONObject.parseObject(str);
	    	if(json.get("result")!=null){
				json=JSONObject.parseObject(json.get("result").toString());
			} 
	    	if(json.get("USD")!=null) { 
	    		JSONObject usd=JSONObject.parseObject(json.get("USD").toString());
	    		if(usd.get("BOC")!=null){ 
	    			JSONObject boc=JSONObject.parseObject(usd.get("BOC").toString());
	    			if(boc.get("se_buy")!=null){ 
	    				 
	    				Exchangerate  exchangerate=new Exchangerate();
        				exchangerate.set_id(mongoSequence.currval(PubConstants.PUB_EXCHANGERATE)); 
        				exchangerate.setType("USD_CNY");
        	    		exchangerate.setValue(BaseDecimal.division(boc.get("se_buy").toString(), "100", 6));
        	    		exchangerate.setUpddate(new Date());
        	    		baseDao.insert(PubConstants.PUB_EXCHANGERATE, exchangerate);
        	    		GetAllFunc.rmbrate.put(SysConfig.getProperty("custid"),exchangerate); 
	    			}
	    		}
	    	};
		}
		
		//更新pada
    	str=HttpClient.sendGet(SysConfig.getProperty("uskd_price_api"));
    	if(StringUtils.isNotEmpty(str)){
    		JSONObject json=JSONObject.parseObject(str);
        	if(json.get("new_price")!=null) {
        		//存储
        		PadaChangerate padaChangerate=new PadaChangerate();
        		padaChangerate.set_id(mongoSequence.currval(PubConstants.PUB_PADACHANGERATE));
        		padaChangerate.setType("CNY_PADA");
        		padaChangerate.setUpddate(new Date());
        		padaChangerate.setValue(BaseDecimal.multiplication(GetAllFunc.rmbrate.get(SysConfig.getProperty("custid")).getValue(), json.get("new_price").toString())); 
        		baseDao.insert(PubConstants.PUB_PADACHANGERATE,padaChangerate);
        		GetAllFunc.padarate.put(SysConfig.getProperty("custid"),padaChangerate);  
        	};
    	}
    	//更新eth
    	str=HttpClient.sendGet("https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=CNY");
    	if(StringUtils.isNotEmpty(str)){
    		JSONObject json=JSONObject.parseObject(str);
        	if(json.get("CNY")!=null) {
        		//存储
        		EthChangerate ethChangerate=new EthChangerate();
        		ethChangerate.set_id(mongoSequence.currval(PubConstants.PUB_ETHCHANGERATE));
        		ethChangerate.setType("CNY_ETH");
        		ethChangerate.setUpddate(new Date());
        		ethChangerate.setValue(json.get("CNY").toString()); 
        		baseDao.insert(PubConstants.PUB_ETHCHANGERATE,ethChangerate);
        		GetAllFunc.ethrate.put(SysConfig.getProperty("custid"),ethChangerate); 
        	};
    	}
	}
	
	 public static void main(String[] args) throws Exception {
		 TimerService  timerService=new TimerService();
		 timerService.updProstore();
	    }
}