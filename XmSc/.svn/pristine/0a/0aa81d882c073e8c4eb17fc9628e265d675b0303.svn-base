package com.lsp.user.web;

import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.regex.Pattern;

import org.apache.commons.lang3.StringUtils;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.factory.annotation.Autowired;

import com.lsp.integral.entity.InteSetting;
import com.lsp.pub.dao.BaseDao;
import com.lsp.pub.db.MongoSequence;
import com.lsp.pub.entity.Code;
import com.lsp.pub.entity.GetAllFunc;
import com.lsp.pub.entity.PubConstants;
import com.lsp.pub.entity.WxToken;
import com.lsp.pub.util.BaseDecimal;
import com.lsp.pub.util.DateUtil;
import com.lsp.pub.util.PBKDF2Util;
import com.lsp.pub.util.SpringSecurityUtils;
import com.lsp.pub.util.Struts2Utils;
import com.lsp.pub.util.SysConfig;
import com.lsp.pub.util.UniObject;
import com.lsp.pub.util.UserUtil;
import com.lsp.pub.util.WeiXinUtil;
import com.lsp.pub.web.GeneralAction;
import com.lsp.user.entity.UserInfo;
import com.lsp.website.service.WwzService;
import com.lsp.weixin.entity.WxUser;
import com.lsp.weixin.entity.WxUserToken;
import com.mongodb.BasicDBList;
import com.mongodb.BasicDBObject;
import com.mongodb.DBObject;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
/**
 * 手机用户管理
 * @author lsp
 *
 */
@Namespace("/user")
@Results({@org.apache.struts2.convention.annotation.Result(name="reload", location="fromuser.action",params={"fypage", "%{fypage}","nickname", "%{nickname}"}, type="redirect")})
public class FromuserAction extends GeneralAction<WxUser>{
	 private static final long serialVersionUID = -6784469775589971579L;

	  private String results="0";
	  @Autowired
	  private BaseDao basedao;
	  private String _id;
	  private WxUser entity = new WxUser();
	  private MongoSequence mongoSequence;
	  @Autowired
	  private WwzService  wwzservice; 
	  @Autowired
	  public void setMongoSequence(MongoSequence mongoSequence)
	  {
	    this.mongoSequence = mongoSequence;
	  }
	  public void set_id(String _id) {
	    this._id = _id;
	  }
	  
	  public String execute() throws Exception {
		  
		    HashMap<String, Object> sortMap = new HashMap<String, Object>();
		    HashMap<String, Object> whereMap = new HashMap<String, Object>();
		    custid=SpringSecurityUtils.getCurrentUser().getId();
		    
		    if(StringUtils.isNotEmpty(custid))
			{
		    	if(custid.equals(SysConfig.getProperty("custid"))){
			    	
			    }else{
			    	Pattern pattern = Pattern.compile("^.*" + custid + ".*$",
							Pattern.CASE_INSENSITIVE);
					whereMap.put("custid", pattern); 
			    }
				
			} 
			String  nickname=Struts2Utils.getParameter("nickname");
			if(StringUtils.isNotEmpty(nickname))
			{
				Pattern pattern = Pattern.compile("^.*" + nickname + ".*$",
						Pattern.CASE_INSENSITIVE);
				whereMap.put("nickname", pattern);
				Struts2Utils.getRequest().setAttribute("nickname",  nickname);
			}
			String  isline=Struts2Utils.getParameter("isline");
			if(StringUtils.isNotEmpty(isline))
			{  
				if(Integer.parseInt(isline)==1){
					whereMap.put("online", Integer.parseInt(isline));
				}else if (Integer.parseInt(isline)==0) {
					BasicDBList   dblist=new BasicDBList(); 
					dblist.add(new BasicDBObject("online",null));
					dblist.add(new BasicDBObject("online",0));
					//or判断
					whereMap.put("$or", dblist); 
				}
				
				Struts2Utils.getRequest().setAttribute("isline",  isline);
			}
		    sortMap.put("createdate", Integer.valueOf(-1));
			if(StringUtils.isNotEmpty(Struts2Utils.getParameter("fypage"))){
				fypage=Integer.parseInt(Struts2Utils.getParameter("fypage"));
			} 
		    List<DBObject> list = this.basedao.getList(PubConstants.DATA_WXUSER, whereMap,fypage,10,sortMap);
		    Struts2Utils.getRequest().setAttribute("userList", list);
		    for (DBObject dbObject : list) { 
		    	if(dbObject.get("_id")!=null){
		    		DBObject  code=basedao.getMessage(PubConstants.USER_AUTHCODE,dbObject.get("_id").toString());
		    		if(code!=null){
			    		dbObject.put("activitydate", code.get("activitydate"));
			    	}
		    		dbObject.put("logindate",wwzservice.getlogin(custid, dbObject.get("_id").toString()));
		    	}
		    	
		    	
			}
		    this.fycount = this.basedao.getCount(PubConstants.DATA_WXUSER,whereMap); 
		    Struts2Utils.getRequest().setAttribute("custid",SpringSecurityUtils.getCurrentUser().getId());
		  
		  return SUCCESS;
	  }
	@Override
	public String input() throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update() throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	public void upd() throws Exception {
		DBObject db = basedao.getMessage(PubConstants.DATA_WXUSER, _id);
		String json = JSONObject.fromObject(db).toString();
		Struts2Utils.renderJson(json, new String[0]);
	}
	@Override
	public String save() throws Exception {
		// TODO Auto-generated method stub  
	     DBObject  db=basedao.getMessage(PubConstants.DATA_WXUSER, _id);
	     if(db!=null){
	    	 WxUser  user=(WxUser) UniObject.DBObjectToObject(db, WxUser.class);
	    	 user.setPassword(Struts2Utils.getParameter("password"));
	    	 basedao.insert(PubConstants.DATA_WXUSER, user); 
	     }
		return RELOAD;
	}

	@Override
	public String delete() throws Exception {
		// TODO Auto-generated method stub
		try { 
			custid=SpringSecurityUtils.getCurrentUser().getId();
			basedao.delete(PubConstants.DATA_WXUSER,_id);
			/*HashMap<String, Object>whereMap=new HashMap<String, Object>(); 
			whereMap.put("_id",_id);
			if(StringUtils.isNotEmpty(custid)){
				Pattern pattern = Pattern.compile("^.*" + custid + ".*$",
						Pattern.CASE_INSENSITIVE);
				whereMap.put("custid", pattern); 	
			}
			DBObject db=basedao.getMessage(PubConstants.DATA_WXUSER, whereMap);
			if(db!=null){
				WxUser  user=(WxUser) UniObject.DBObjectToObject(db, WxUser.class);
				user.setCustid(user.getCustid().replace(custid+",", ""));
				basedao.insert(PubConstants.DATA_WXUSER, user);
			}*/ 
			addActionMessage("删除成功");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return RELOAD;
	}

	@Override
	protected void prepareModel() throws Exception {
		// TODO Auto-generated method stub
		try {
			if(_id!=null){
				DBObject  db=basedao.getMessage(PubConstants.DATA_WXUSER, _id);
				entity=(WxUser) UniObject.DBObjectToObject(db, WxUser.class);
			}else{
				
				entity=new WxUser();
				
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			addActionMessage("删除失败");
		}
		
	}
	@Override
	public WxUser getModel() {
		// TODO Auto-generated method stub
		return entity;
	}
	 public String UserDetail(){ 
		  getLscode();  
		  Struts2Utils.getRequest().setAttribute("custid",custid );
		  System.out.println(custid);
		  //WxToken token=GetAllFunc.wxtoken.get(custid);
		  WxToken token = null;
			if (StringUtils.isNotEmpty(custid)) {
				token = GetAllFunc.wxtoken.get(custid);
			} else {
				token = GetAllFunc.wxtoken.get(SysConfig.getProperty("custid"));
			}
			if (token.getSqlx() > 0) {
				token = GetAllFunc.wxtoken.get(wwzservice.getparentcustid(custid));
			}
			Struts2Utils.getRequest().setAttribute("token",WeiXinUtil.getSignature(token,Struts2Utils.getRequest()));
			token=WeiXinUtil.getSignature(token,Struts2Utils.getRequest()); 
			String  url=SysConfig.getProperty("ip")+"/user/fromuser!UserDetail.action?custid="+custid;  
			if(StringUtils.isEmpty(fromUserid)){ 
				String inspection="https://open.weixin.qq.com/connect/oauth2/authorize?appid="+token.getAppid()+"&redirect_uri="+URLEncoder.encode(url)+"&response_type=code&scope=snsapi_base&state=c1c2j3h4#wechat_redirect";
				Struts2Utils.getRequest().setAttribute("inspection",inspection);  
				return "refresh";
			}else if(fromUserid.equals("register")){ 
				String inspection="https://open.weixin.qq.com/connect/oauth2/authorize?appid="+token.getAppid()+"&redirect_uri="+URLEncoder.encode(url)+"&response_type=code&scope=snsapi_userinfo&state=register#wechat_redirect";
				Struts2Utils.getRequest().setAttribute("inspection",inspection);  
				return "refresh";
			}  
		  
		  //优先使用用户ID查询
		  DBObject wxUser=new BasicDBObject();
		  if(StringUtils.isNotEmpty(fromUserid)){
			  HashMap<String, Object>whereMap=new HashMap<String, Object>();
			  whereMap.put("_id", fromUserid);
			  wxUser=wwzservice.getWxUser(whereMap);
			  whereMap.clear();
			  whereMap.put("fromUserid",fromUserid);
			  whereMap.put("custid", custid);
			  Long bbscount=basedao.getCount(PubConstants.BBS_INFO, whereMap);
			  whereMap.clear();
			  whereMap.put("fromUserid",fromUserid);
			  Long tackcount=basedao.getCount(PubConstants.SUC_TASK);
			  //wxUser.put("bbscount",bbscount); 
			  wxUser.put("tackcount",tackcount); 
			  if(wxUser.get("getExperience")!=null&&wxUser.get("needExperience")!=null) {
				  double bl= Double.parseDouble(wxUser.get("getExperience").toString())/Double.parseDouble(wxUser.get("needExperience").toString());   
				  wxUser.put("expbl",new java.text.DecimalFormat("#").format(bl*100)); 
			  } 
			  DBObject jfobj=wwzservice.getJfOBJ(SysConfig.getProperty("custid"), fromUserid);
			  System.out.println(jfobj);
			  //积分 
			  if (jfobj!=null) {
				  Struts2Utils.getRequest().setAttribute("jf",jfobj.get("uservalue") );
			  } 
			  //llb 
			  if (jfobj!=null) { 
				  Struts2Utils.getRequest().setAttribute("llb",jfobj.get("llkyvalue") );
			  }
			  if (jfobj!=null) { 
				  Struts2Utils.getRequest().setAttribute("yj",jfobj.get("yjvalue") );
			  }
			  if (jfobj!=null) { 
				  Struts2Utils.getRequest().setAttribute("xfjl",jfobj.get("prostore") );
			  }
			 
			
			  Struts2Utils.getRequest().setAttribute("entity", wxUser);
		  }else{
			 
			  if(StringUtils.isEmpty(qqfromUser)){
				  //未登录
				  return "fromlogin";  
			  }else{
				  //根据QQ登录信息查询  
				  HashMap<String, Object>whereMap=new HashMap<String, Object>();
				  whereMap.put("qqfromUser", qqfromUser);
				  wxUser=wwzservice.getWxUser(whereMap);
				  whereMap.put("custid", custid);
				  Long count=basedao.getCount(PubConstants.BBS_INFO, whereMap);
				  wxUser.put("bbscount",count);
				  Struts2Utils.getRequest().setAttribute("entity", wxUser);
				  
				  
			  }
			  
		  }
		  //加载菜单   
		  DBObject  mb=wwzservice.getfromusermbs(custid);
		  Struts2Utils.getRequest().setAttribute("func",mb);  
		  
		  DBObject share=wwzservice.getShareFx(custid,"fromuser_share"); 
		  if(share==null){
			  share=new BasicDBObject();
		  }
		  if(GetAllFunc.wxTouser.get(custid)!=null){
			  share.put("fximg",GetAllFunc.wxTouser.get(custid).getLogo());
		  }
		  
		  share.put("fxurl",url);  
		  Struts2Utils.getRequest().setAttribute("share", share);
		  //加载佣金
		  DBObject  agent=wwzservice.getAgentPrice(custid, fromUserid);
		  Struts2Utils.getRequest().setAttribute("agent",agent);
		  //检测代理 
		  if(wwzservice.checkAgent(custid,fromUserid)){
			 Struts2Utils.getRequest().setAttribute("isAgent","ok");
		  }
		  
		  /**获取商品关注、收藏， 店铺关注、收藏数量***/
		  HashMap<String, Object> whereMap=new HashMap<String, Object>();
		 whereMap.put("fromUserid", fromUserid);
		 Long productattentionCount=basedao.getCount(PubConstants.SHOP_PRODUCTATTENTION, whereMap);
		 Long productcollectCount=basedao.getCount(PubConstants.SHOP_PRODUCTCOLLET, whereMap);
		 //店铺关注 收藏
		 Long shopattentionCount=basedao.getCount(PubConstants.SHOP_SHOPATTENTION, whereMap);
		 Long shopcollectCount=basedao.getCount(PubConstants.SHOP_SHOPCOLLECT, whereMap);
		 Struts2Utils.getRequest().setAttribute("productattentionCount",productattentionCount);
		 Struts2Utils.getRequest().setAttribute("productcollectCount",productcollectCount);
		 
		 Struts2Utils.getRequest().setAttribute("shopattentionCount",shopattentionCount);
		 Struts2Utils.getRequest().setAttribute("shopcollectCount",shopcollectCount);
		 
		 /*********2018/7/14 获取当前用户代理************************/
		 String daili="";
		 UserInfo user = (UserInfo) UniObject.DBObjectToObject(wxUser,UserInfo.class);
		 if(user!=null) {
			 //1-省  2-市  3-县   4-部门  5-会员  6-会员的下级会员
			 int agentLevel = user.getAgentLevel();
			 
			 String agentprovince=user.getAgentprovince();
			 String agentcity = user.getAgentcity();
			 String agentcounty =user.getAgentcounty();
			 if(agentLevel==1) {
				 daili=agentprovince+"代理";
			 }else if(agentLevel==2) {
				 daili=agentprovince+agentcity+"代理";
			 }else if(agentLevel==3) {
				 daili=agentprovince+agentcity+agentcounty+"代理";
			 }else if(agentLevel==4) {
				 daili="报单中心";
			 }else if(agentLevel==5) {
				 daili="会员";
			 }else if(agentLevel==6) {
				 daili="商家";
			 }
		 }
		 Struts2Utils.getRequest().setAttribute("daili", daili);
		 
		 
		 if(mb!=null&&mb.get("mb")!=null){
			  return "detail"+mb.get("mb");  
		  }
		return "detail2";   
	  }
	 public String register(){
		  
		return "register";   
	 }
	 /**
	  * ajax注册
	  */
	 public void  ajaxregister(){
		//邮箱用作登录账户方便邮箱验证
		String  name=Struts2Utils.getParameter("name");
		String  toUser=Struts2Utils.getParameter("toUser");
		String  custid=Struts2Utils.getParameter("custid");
		String  password=Struts2Utils.getParameter("password"); 
		Map<String, Object>sub_Map=new HashMap<String, Object>();
		//验证用户名是否唯一
		if(wwzservice.checkName(name)){
			try {
				if(StringUtils.isNotEmpty(name)&&StringUtils.isNotEmpty(password)){
					 WxUser user=new WxUser();
					 user.set_id(UUID.randomUUID().toString());
					 user.setLoginname(name); 
					 //user.setNo(wwzservice.getVipNo());
					 user.setLoginpasswd(password);
					 user.setCreatedate(new Date());
					 user.setNickname("江湖大虾!");
					 user.setEmail(name);
					 user.setToUser(toUser);
					 user.setCustid(custid);
					 basedao.insert(PubConstants.DATA_WXUSER, user);
					 sub_Map.put("state",0);
					 sub_Map.put("value", user.get_id().toString());
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				sub_Map.put("state", 1);
				e.printStackTrace();
			}
		}else{
			sub_Map.put("state", 2); 
		}
		
		String json = JSONArray.fromObject(sub_Map).toString();
		 
		Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
		
		 
	 }
	 /**
	  * ajax登录
	  */
	 public void  ajaxlongin(){
		 String  name=Struts2Utils.getParameter("name");
		 String  password=Struts2Utils.getParameter("password");
		 HashMap<String, Object>whereMap=new HashMap<String, Object>();
		 Map<String, Object>sub_Map=new HashMap<String, Object>();
		 try {
			
			 whereMap.put("loginname", name);
			 DBObject  db=basedao.getMessage(PubConstants.DATA_WXUSER, whereMap);
			 if(db!=null){
				 if(db.get("loginpasswd").equals(password)){
					sub_Map.put("state", 0);
					sub_Map.put("value", db.get("_id").toString());
				 }
			 }
		} catch (Exception e) {
			sub_Map.put("state", 1);
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String json = JSONArray.fromObject(sub_Map).toString();
		 
		Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
		 
	 }
	 /**
	  * 微信授权登录
	  */
	 public  String   wxlogin(){
		 getLscode();
		 String number = Struts2Utils.getParameter("number");
		 WxUserToken token=GetAllFunc.usertoken.get(fromUser);
		 //fromUserid=wwzservice.register(fromUser,token,custid);
		 fromUserid=wwzservice.registerCommend(fromUser,token,custid,number); 
		 if(StringUtils.isNotEmpty(fromUserid)){
			 lscode=wwzservice.createcode(fromUserid);	 
		 }
		 Struts2Utils.getRequest().setAttribute("lscode", lscode);
		 Struts2Utils.getRequest().setAttribute("custid", custid);
		 return "wxlogin";
	 }
	 /**
	  * ajax返回登录url
	  */
	 public void  getloginurl(){
		 custid=getCustid();
		 Map<String, Object> submap = new HashMap<String, Object>();
		try {
			 WxToken token=GetAllFunc.wxtoken.get(custid); 
			 if(token.getSqlx()>0){
				 token=GetAllFunc.wxtoken.get(wwzservice.getparentcustid(custid)); 
			 } 
			 
			 String surl=SysConfig.getProperty("ip")+"/user/fromuser!wxlogin.action?custid="+custid;
			 String ddurl="https://open.weixin.qq.com/connect/oauth2/authorize?appid="+token.getAppid()+"&redirect_uri="+URLEncoder.encode(surl)+"&response_type=code&scope=snsapi_userinfo&state=123#wechat_redirect";
		     submap.put("state", 0);
		     submap.put("value", ddurl);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			submap.put("state",1);
			e.printStackTrace();
		}
		 String json = JSONArray.fromObject(submap).toString(); 
		 Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	 }
	public String  qqlogin(){
		  fromUserid=getFromUserid();
		  custid=getCustid(); 
		  Struts2Utils.getRequest().setAttribute("fromUserid", fromUserid);
		  Struts2Utils.getRequest().setAttribute("custid",custid );
		return "qqlogin";
		
	}
	/**
	 * 用户信息
	 * @return
	 */
	public String  detail(){ 
		 getLscode();
		 DBObject  user=wwzservice.getWxUser(fromUserid);
		 Struts2Utils.getRequest().setAttribute("user",user);
		 Struts2Utils.getRequest().setAttribute("custid",custid); 
		 String backurl = Struts2Utils.getParameter("backurl");
		 Struts2Utils.getRequest().setAttribute("backurl", backurl);
		return "add";
		
	}
	public void  savedetatil(){
		 Map<String, Object> submap = new HashMap<String, Object>();
		 HashMap<String, Object>whereMap=new HashMap<String, Object>();
		 getLscode();
		 BasicDBObject dateCondition = new BasicDBObject();
		 String  headimgurl=Struts2Utils.getParameter("headimgurl");
		 String  email=Struts2Utils.getParameter("email");
		 String  nickname=Struts2Utils.getParameter("nickname");
		 String  qq=Struts2Utils.getParameter("qq");
		 String  wxid=Struts2Utils.getParameter("wxid");
		 String  tel=Struts2Utils.getParameter("tel");
		 String  password=Struts2Utils.getParameter("password");
		 DBObject db=wwzservice.getWxUser(fromUserid);
		 if(db.get("_id").equals("notlogin")){
			 submap.put("state", 3);
			 return;
		 }else{
			 WxUser  user=(WxUser) UniObject.DBObjectToObject(db, WxUser.class); 
			 if(StringUtils.isNotEmpty(headimgurl)){
				 user.setHeadimgurl(headimgurl);
			 }
			 if(StringUtils.isNotEmpty(nickname)){
				 user.setNickname(nickname); 
			 }
			 if(StringUtils.isNotEmpty(email)){
				 user.setEmail(email); 
				 whereMap.put("email", email);
	    		 dateCondition.append("$ne", fromUserid);
	    		 whereMap.put("_id", dateCondition);
	    		 DBObject users = basedao.getMessage(PubConstants.DATA_WXUSER, whereMap);
	    		 if( users != null){
	    			 
	    			 submap.put("state", 2);//邮箱已绑定，请重新绑定
	    			 String json = JSONArray.fromObject(submap).toString(); 
	    			 Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	    			 
	    			 return ;
	    		 }
			 }
			 if(StringUtils.isNotEmpty(qq)){
				 
				 user.setQq(qq);
				 
				 whereMap.put("qq", qq);
	    		 dateCondition.append("$ne", fromUserid);
	    		 whereMap.put("_id", dateCondition);
	    		 DBObject users = basedao.getMessage(PubConstants.DATA_WXUSER, whereMap);
	    		 if( users != null){
	    			 
	    			 submap.put("state", 3);//QQ已绑定，请重新绑定
	    			 String json = JSONArray.fromObject(submap).toString(); 
	    			 Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	    			 
	    			 return ;
	    		 }
			 }
			 if(StringUtils.isNotEmpty(wxid)){
				 user.setWxid(wxid); 
				 
				 whereMap.put("wxid", wxid);
	    		 dateCondition.append("$ne", fromUserid);
	    		 whereMap.put("_id", dateCondition);
	    		 DBObject users = basedao.getMessage(PubConstants.DATA_WXUSER, whereMap);
	    		 if( users != null){
	    			 
	    			 submap.put("state", 4);//微信已绑定，请重新绑定
	    			 String json = JSONArray.fromObject(submap).toString(); 
	    			 Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	    			 
	    			 return ;
	    		 }
			 }
			 if(StringUtils.isNotEmpty(tel)){
				 user.setTel(tel);	
				 
				 whereMap.put("tel", tel);
	    		 dateCondition.append("$ne", fromUserid);
	    		 whereMap.put("_id", dateCondition);
	    		 DBObject users = basedao.getMessage(PubConstants.DATA_WXUSER, whereMap);
	    		 if( users != null){
	    			 
	    			 submap.put("state", 5);//手机号已绑定，请重新绑定
	    			 String json = JSONArray.fromObject(submap).toString(); 
	    			 Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	    			 
	    			 return ;
	    		 }
			 }
			 if(StringUtils.isNotEmpty(password)){
				 user.setPassword(password);
			 }
			  
			 basedao.insert(PubConstants.DATA_WXUSER, user);
			 submap.put("state", 0);
		 } 
		 String json = JSONArray.fromObject(submap).toString(); 
		 Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	}
	/**
	 * 设置安卓管理员
	 */
	public  void   setAndroidAdmin(){
		Map<String, Object> submap = new HashMap<String, Object>();
		custid=SpringSecurityUtils.getCurrentUser().getId();
		String id=Struts2Utils.getParameter("id");
		DBObject  db=basedao.getMessage(PubConstants.DATA_WXUSER, id);
		if(db!=null){
			WxUser  user=(WxUser) UniObject.DBObjectToObject(db, WxUser.class);
			user.setAndroidAdmin(1);
			basedao.insert(PubConstants.DATA_WXUSER, user);
			submap.put("state", 0);
		}
		String json = JSONArray.fromObject(submap).toString(); 
		Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	}
	/**
	 * 取消安卓管理员
	 */
	public  void   cancelAndroidAdmin(){
		Map<String, Object> submap = new HashMap<String, Object>();
		custid=SpringSecurityUtils.getCurrentUser().getId();
		String id=Struts2Utils.getParameter("id");
		DBObject  db=basedao.getMessage(PubConstants.DATA_WXUSER, id);
		if(db!=null){
			WxUser  user=(WxUser) UniObject.DBObjectToObject(db, WxUser.class);
			user.setAndroidAdmin(0);
			basedao.insert(PubConstants.DATA_WXUSER, user);
			submap.put("state", 0);
		}
		String json = JSONArray.fromObject(submap).toString(); 
		Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	} 
	/**
	 * 设置用户密码
	 */
	public  void  setfromUserpasswd(){
		Map<String, Object> submap = new HashMap<String, Object>();
		custid=SpringSecurityUtils.getCurrentUser().getId();
		String  password=Struts2Utils.getParameter("password");
		String  id=Struts2Utils.getParameter("id");
		if(StringUtils.isNotEmpty(password)&&StringUtils.isNotEmpty(id)){
			DBObject  db=basedao.getMessage(PubConstants.DATA_WXUSER, id);
			if(db!=null){
				WxUser  user=(WxUser) UniObject.DBObjectToObject(db, WxUser.class);
				user.setPassword(password);
				basedao.insert(PubConstants.DATA_WXUSER, user);
				submap.put("state", 0);
			}
		}
		String json = JSONArray.fromObject(submap).toString(); 
		Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	}
	public String test(){
		getLscode();
		Struts2Utils.getRequest().setAttribute("custid",custid);
		return "test";
	} 
	/**
	 * 测试账号创建
	 * @throws Exception
	 */
	public void ajaxsave() throws Exception{

		System.err.println();
	}
	
	/**
	 * 推荐用户
	 */
	public String share() throws Exception{
		getLscode();   
		return "share";
	}
	
	
	
	/**
	 * 生成验证码
	 */
	public void   createTelCode() {
		HashMap<String, Object>sub_map=new HashMap<>();
		sub_map.put("state",1);
		String tel=Struts2Utils.getParameter("tel");
		String code=UserUtil.createVipNo(6);
		if (code!=null&&tel!=null) {
			System.out.println(code);
			Code code2=new Code();
			code2.setCode(code);
			code2.setCreatedate(new Date());
			code2.setType(0);
			code2.setValue(tel);
			GetAllFunc.telcode.put(tel, code2);
			boolean bl=wwzservice.sendSMS(tel, "您的验证码为"+code+"，有效时间10分钟。");
			if (bl) {
				sub_map.put("state",0);
			} 
		}
		
		String json = JSONArray.fromObject(sub_map).toString();
	    Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	}
	
	/**
	 * 生成会员编号
	 * @return
	 */
	public  String  getVipNo(){
		String vipno=null;
		Long  count=basedao.getCount(PubConstants.USER_INFO);
		while (true) { 
			if(count.toString().length()>=5&&Double.parseDouble(count.toString())>=Math.pow(10,Double.parseDouble(count.toString())+1)-10000){
				vipno=UserUtil.createVipNo(count.toString().length()+1);
			}else{
				vipno=UserUtil.createVipNo(5);
			}
			//鎺掓煡棣栦綅涓�0锛�
			if(!vipno.startsWith("0")){
				//妫�鏌ユ槸鍚﹀敮涓�
				HashMap<String, Object>whereMap=new HashMap<String, Object>();
				whereMap.put("no", vipno);
				Long num=basedao.getCount(PubConstants.USER_INFO,whereMap);
				if(num==0){
					break;
				} 
			}
		}
		return vipno;
	}
	
	/***
	 * 注册
	 * @throws Exception
	 */
	public void signup() throws Exception{
		Map<String,Object>sub_map = new HashMap<>();
		HashMap<String, Object> whereMap = new HashMap<String, Object>();
		sub_map.put("state", 1);
		String tel=Struts2Utils.getParameter("tel");
		String yzcode=Struts2Utils.getParameter("verCode"); 
		String password=Struts2Utils.getParameter("password"); 
		System.out.println("手机验证码-verCode--》"+yzcode);
		String userName = Struts2Utils.getParameter("username");//真实姓名
		String id_card = Struts2Utils.getParameter("id_card");//身份证号码
		String email = Struts2Utils.getParameter("email");//身份证号码
		String id_card_front = Struts2Utils.getParameter("id_card_front");//身份证正面照
		String id_card_reverse = Struts2Utils.getParameter("id_card_recverse");//身份证反面照
		String company_name = Struts2Utils.getParameter("company_name"); //公司名称
		String lisense_number= Struts2Utils.getParameter("lisense_number"); //营业证号码
		String lisense_photo = Struts2Utils.getParameter("lisense_photo"); //营业证照片
		String status = Struts2Utils.getParameter("status"); //状态
		
		String province = Struts2Utils.getParameter("province");//省
		String city = Struts2Utils.getParameter("city");//市
		String county = Struts2Utils.getParameter("county");//区
		
		whereMap.put("account", tel);
		whereMap.put("tel", tel);
		Long count =basedao.getCount(PubConstants.USER_INFO, whereMap);
		
		Code code=GetAllFunc.telcode.get(tel); 
		System.out.println("手机验证码---》"+code.getCode());
		if(count == 0){
			if (code!=null&&code.getCode().equals(yzcode)) {
				//验证时间
				if(DateUtil.checkbig(DateUtil.addMinute(code.getCreatedate(),10))) {
					if(status.equals("1")) {//个人注册
						UserInfo user = new UserInfo();
						user.set_id(UUID.randomUUID().toString());
						user.setAccount(tel.trim());
						user.setTel(tel.trim());
						user.setPassword(password.trim());
						user.setCustid(SysConfig.getProperty("custid"));
						//user.setRoleid(Long.parseLong(SysConfig.getProperty("sjRoleid")));
						user.setProvince(province.trim());
						user.setCity(city.trim());
						user.setCounty(county.trim());
						user.setUserName(userName);
						user.setEmail(email);
						user.setId_card_front(id_card_front);
						user.setId_card_reverse(id_card_reverse);
						user.setNumber(Long.parseLong(getVipNo()));
						//user.setAgentLevel(agentLevel);
						basedao.insert(PubConstants.USER_INFO, user);
						String lscode=wwzservice.createcode(user.get_id().toString());
						sub_map.put("lscode", lscode);//注册成功
						sub_map.put("state", 0);//注册成功
					}else if(status.equals("2")) {//商家注册
						UserInfo user = new UserInfo();
						user.set_id(UUID.randomUUID().toString());
						user.setAccount(tel.trim()); 
						user.setTel(tel.trim());
						user.setEmail(email);
						user.setPassword(password.trim());
						user.setCustid(SysConfig.getProperty("custid"));
						user.setRoleid(Long.parseLong(SysConfig.getProperty("sjRoleid")));
						user.setUserName(userName.trim()); 
						if(id_card!=null&&id_card!=""){
							user.setId_card(id_card.trim());
						}
						
						user.setId_card_front(id_card_front);
						user.setId_card_reverse(id_card_reverse);
						
						if(company_name!=null&&company_name!=""){
							user.setCompany_name(company_name.trim());
						}
						
						if(lisense_number!=null&&lisense_number!=""){
							user.setLisense_number(lisense_number.trim());
						}
						
						user.setLisense_photo(lisense_photo);
						
						if(province!=""&&province!=null){
							user.setProvince(province.trim());
						}
						
						if(city!=null&&city!=""){
							user.setCity(city.trim());
						}
						
						if(county!=null&&county!=""){
							user.setCounty(county.trim());
						}
						user.setCreatedate(new Date());
						user.setNumber(Long.parseLong(getVipNo()));
						user.setAudit_status(0);
						basedao.insert(PubConstants.USER_INFO, user);
						String lscode=wwzservice.createcode(user.get_id().toString());
						sub_map.put("lscode", lscode);//注册成功
						sub_map.put("state", 0);//注册成功
					}
					
				}else{
					sub_map.put("state", 4);//验证码超时
				}
			}else{
				sub_map.put("state", 3);//验证码输入错误
			}
		}else{
			sub_map.put("state", 2);//用户名已存在
		}
		
		String json = JSONArray.fromObject(sub_map).toString();
		Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	}
	
	
	/***
	 * 注册
	 * @throws Exception
	 */
	public void shopsignup() throws Exception{
		getLscode();
		String userid  =fromUserid;
		System.out.println("---------------fromuserid:"+ fromUserid);
		Map<String,Object>sub_map = new HashMap<>();
		HashMap<String, Object> whereMap = new HashMap<String, Object>();
		sub_map.put("state", 1);
		String tel=Struts2Utils.getParameter("tel");
		String yzcode=Struts2Utils.getParameter("verCode"); 
		String password=Struts2Utils.getParameter("password"); 
		System.out.println("手机验证码-verCode--》"+yzcode);
		String userName = Struts2Utils.getParameter("username");//真实姓名
		String id_card = Struts2Utils.getParameter("id_card");//身份证号码
		String email = Struts2Utils.getParameter("email");//身份证号码
		String id_card_front = Struts2Utils.getParameter("id_card_front");//身份证正面照
		
		String id_card_reverse = Struts2Utils.getParameter("id_card_reverse");//身份证反面照
		String company_name = Struts2Utils.getParameter("company_name"); //公司名称
		String lisense_number= Struts2Utils.getParameter("lisense_number"); //营业证号码
		String lisense_photo = Struts2Utils.getParameter("lisense_photo"); //营业证照片
		String status = Struts2Utils.getParameter("status"); //状态
		
		String province = Struts2Utils.getParameter("province");//省
		String city = Struts2Utils.getParameter("city");//市
		String county = Struts2Utils.getParameter("county");//区
		
		   
		 
		
		DBObject db = basedao.getMessage(PubConstants.USER_INFO, fromUserid);
		if(db != null){
			UserInfo user = (UserInfo) UniObject.DBObjectToObject(db, UserInfo.class);
			Code code=GetAllFunc.telcode.get(tel); 
			if (code!=null&&code.getCode().equals(yzcode)) {
				//验证时间
			  if(DateUtil.checkbig(DateUtil.addMinute(code.getCreatedate(),10))) {
				user.set_id(fromUserid);
				user.setAccount(tel.trim()); 
				
				user.setEmail(email);
				user.setPassword(password.trim());
				user.setCustid(SysConfig.getProperty("custid"));
				user.setRoleid(Long.parseLong(SysConfig.getProperty("sjRoleid")));
				user.setUserName(userName.trim()); 
				if(id_card!=null&&id_card!=""){
					user.setShop_id_card(id_card.trim());
				}
				
				user.setShop_id_card_front(id_card_front);
				user.setShop_id_card_reverse(id_card_reverse);
				user.setShop_mobile(tel.trim());
				user.setCompany_name(company_name.trim());
				
				if(lisense_number!=null&&lisense_number!=""){
					user.setLisense_number(lisense_number.trim());
				}
				
				user.setLisense_photo(lisense_photo);
				
				if(province!=""&&province!=null){
					user.setProvince(province.trim());
				}
				
				if(city!=null&&city!=""){
					user.setCity(city.trim());
				}
				
				if(county!=null&&county!=""){
					user.setCounty(county.trim());
				}
				user.setCreatedate(new Date()); 
				user.setAudit_status(0);
				basedao.insert(PubConstants.USER_INFO, user);
				String lscode=wwzservice.createcode(user.get_id().toString());
				sub_map.put("lscode", lscode);//注册成功
				sub_map.put("state", 0);//注册成功
				}else{
					sub_map.put("state", 4);//验证码超时
				}
			}else{
				sub_map.put("state", 3);//验证码输入错误
			}
			
		}else {
			sub_map.put("state", 9);//用户信息有误请重新登录注册
		}
		
		 
		
		String json = JSONArray.fromObject(sub_map).toString();
		Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	}
	
	
	/**
	 * 登录
	 * @throws Exception
	 */
    public void signin() throws Exception{
    	 HashMap<String, Object> whereMap = new HashMap<String, Object>();
   	     Map<String, Object> sub_map = new HashMap<String, Object>(); 
   	     sub_map.put("state", 1);//操作失败
   	     String zh =Struts2Utils.getParameter("zh"); 
   	     String tel =Struts2Utils.getParameter("tel"); 
   	     String type =Struts2Utils.getParameter("type"); 
   	     String password =Struts2Utils.getParameter("password");
   	     String yzm = Struts2Utils.getParameter("yzm");
   	     whereMap.put("no", zh);
   	     whereMap.put("account", tel);
  	     if (StringUtils.isNotEmpty(tel)&&StringUtils.isNotEmpty(password)) {
  	    	 if("2".equals(type)) {
  	    		Code code=GetAllFunc.telcode.get(tel);
  	  	   	     if (code!=null&&code.getCode().equals(yzm)) {
  	  				 if(DateUtil.checkbig(DateUtil.addMinute(code.getCreatedate(),10))) {
  	  					DBObject user = basedao.getMessage(PubConstants.USER_INFO, whereMap);
  	  		  		     if(user != null){
  	  		 			   if(user.get("password").toString().equals(password)) {
  	  		                   String lscode=wwzservice.createcode(user.get("_id").toString()); 
  	  		                   sub_map.put("state", 0);//登陆成功
  	  		                   sub_map.put("lscode", lscode);
  	  		 			   }else{
  	  		 				  sub_map.put("state", 3);//密码错误
  	  		 			   }
  	  		  		    }else{
  	  		  		    	/*whereMap = new HashMap<String, Object>();
  	  		  		    	whereMap.put("no", tel);
  	  		  		    	user = basedao.getMessage(PubConstants.USER_INFO, whereMap);
  	  		  		    	if(user != null){
  	  		  	 			   if(user.get("password").toString().equals(password)) {
  	  		  	                   String lscode=wwzservice.createcode(user.get("_id").toString()); 
  	  		  	                   sub_map.put("state", 0);//登陆成功
  	  		  	                   sub_map.put("lscode", lscode);
  	  		  	                   System.out.println("---------lscode:"+lscode);
  	  		  	 			   }else{
  	  		  	 				  sub_map.put("state", 3);//密码错误
  	  		  	 			   }
  	  		  	  		    }else{
  	  		  	  		    	sub_map.put("state", 2);//用户不存在
  	  		  	  		    }*/
  	  		  		    	sub_map.put("state", 2);//用户不存在
  	  		  		    }
  	  				 }else {
  	  					sub_map.put("state", 4);//验证码超时
  	  				 }
  	  			 }else {
  	  				sub_map.put("state", 5);//验证码错误
  	  			 }
  	    	 }else {
  	    		DBObject user = basedao.getMessage(PubConstants.USER_INFO, whereMap);
		  		     if(user != null){
		 			   if(user.get("password").toString().equals(password)) {
		                   String lscode=wwzservice.createcode(user.get("_id").toString()); 
		                   sub_map.put("state", 0);//登陆成功
		                   sub_map.put("lscode", lscode);
		 			   }else{
		 				  sub_map.put("state", 3);//密码错误
		 			   }
		  		    }else{
		  		    	whereMap = new HashMap<String, Object>();
		  		    	whereMap.put("no", tel);
		  		    	user = basedao.getMessage(PubConstants.USER_INFO, whereMap);
		  		    	if(user != null){
		  	 			   if(user.get("password").toString().equals(password)) {
		  	                   String lscode=wwzservice.createcode(user.get("_id").toString()); 
		  	                   sub_map.put("state", 0);//登陆成功
		  	                   sub_map.put("lscode", lscode);
		  	                   System.out.println("---------lscode:"+lscode);
		  	 			   }else{
		  	 				  sub_map.put("state", 3);//密码错误
		  	 			   }
		  	  		    }else{
		  	  		    	sub_map.put("state", 2);//用户不存在
		  	  		    }
		  		    }
  	    	 }
  	    	
	    }
  	    String json = JSONArray.fromObject(sub_map).toString();
	    Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
    }
    
    /**
     * 忘记密码
     * @throws Exception
     */
    public void changepw() throws Exception{
  	  Map<String,Object>sub_map = new HashMap<>();
  	  sub_map.put("state", 1);
  	  HashMap<String,Object>whereMap = new HashMap<>();
  	  String tel=Struts2Utils.getParameter("tel");
  	  String yzcode=Struts2Utils.getParameter("yzcode"); 
  	  String password=Struts2Utils.getParameter("password"); 
  	  whereMap.put("tel", tel);
//  	  DBObject dbObject =basedao.getMessage(PubConstants.DATA_WXUSER, whereMap);
  	DBObject dbObject =basedao.getMessage(PubConstants.USER_INFO, whereMap);
  	  if(dbObject!=null){
//  		  WxUser user = (WxUser) UniObject.DBObjectToObject(dbObject, WxUser.class);
  		  UserInfo user = (UserInfo) UniObject.DBObjectToObject(dbObject, UserInfo.class);
//  		  if(user.getPassword().equals(password)){
  			  Code code=GetAllFunc.telcode.get(tel); 
  				if (code!=null&&code.getCode().equals(yzcode)) { 
//  					 验证时间
  					if(DateUtil.checkbig(DateUtil.addMinute(code.getCreatedate(),10))) {
  						user.set_id(dbObject.get("_id"));
  						user.setPassword(password);
  						basedao.insert(PubConstants.USER_INFO, user);
  						sub_map.put("state", 0);//修改成功
  					}else{
  						sub_map.put("state", 5);//验证码超时
  					}
  				}else{
  					sub_map.put("state", 4);//验证码错误
  				} 
//  		  }else{
//  			  sub_map.put("state", 3);//密码错误
//  		  }
  	  }else{
  		  sub_map.put("state", 2);//该账户不存在
  	  }
  	  
  		String json = JSONArray.fromObject(sub_map).toString();
  		Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
    }
	 
    /**
	 * ajax用户信息完善
	 */
	public void  ajaxuserupdate(){
		getLscode();
		Map<String, Object>sub_Map=new HashMap<String, Object>();
		sub_Map.put("state", 1);//操作失败
		try {
			
			String name =  Struts2Utils.getParameter("name");//姓名
			String tel =  Struts2Utils.getParameter("tel");//电话
			String uskd =  Struts2Utils.getParameter("uskd");//uskd账号
			String password =  Struts2Utils.getParameter("password");//密码
			String province =  Struts2Utils.getParameter("province");//省
			String city =  Struts2Utils.getParameter("city");//市
			String county =  Struts2Utils.getParameter("county");//区
			String idCard =  Struts2Utils.getParameter("idCard");//身份证号码
			/*String up_picture_front =  Struts2Utils.getParameter("up_picture_front");//身份证正面照
			String up_picture_reverse =  Struts2Utils.getParameter("up_picture_reverse");//身份证反面照
*/			
				DBObject db = basedao.getMessage(PubConstants.USER_INFO, fromUserid);
				if(db != null){
					UserInfo user = (UserInfo) UniObject.DBObjectToObject(db, UserInfo.class);
					user.set_id(fromUserid);
					user.setUserName(name);
					user.setTel(tel);
					user.setAccount(tel);
					user.setUskd(uskd);
					user.setPassword(password);
					user.setProvince(province);
					user.setCity(city);
					user.setCounty(county);
					/*user.setId_card_front(up_picture_front);
					user.setId_card_reverse(up_picture_reverse);*/
					user.setIsfull(1);//已补全
					user.setId_card(idCard);
					System.out.println("--2--?"+user.getIsfull());
					basedao.insert(PubConstants.USER_INFO, user);
					sub_Map.put("state", 0);//修改成功
					
				}else{
					sub_Map.put("state", 2);//暂无用户信息
				}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			sub_Map.put("state", 1);//操作失败
			e.printStackTrace();
		}
	  	String json = JSONArray.fromObject(sub_Map).toString();
		Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	}
	
	/**
	 * 个人信息完善
	 */
	public String basemsg()throws Exception{
		getLscode();
		Struts2Utils.getRequest().setAttribute("custid", custid);
		Struts2Utils.getRequest().setAttribute("lscode", lscode);
		HashMap<String, Object> whereMap=new HashMap<>();
		whereMap.put("_id", fromUserid);
		DBObject db = basedao.getMessage(PubConstants.USER_INFO, whereMap);
		UserInfo user = (UserInfo) UniObject.DBObjectToObject(db, UserInfo.class);
		Struts2Utils.getRequest().setAttribute("user", user);
		return "basemsg";
	}
	
	/**
	 * ajax用户信息完善
	 */
	public void  ajaxUserUpdate() throws Exception{
		getLscode();
		Map<String, Object>sub_Map=new HashMap<String, Object>();
		sub_Map.put("state", 1);//操作失败
		try {
			String name =  Struts2Utils.getParameter("name");//姓名
			String tel =  Struts2Utils.getParameter("tel");//电话
			String yzm =  Struts2Utils.getParameter("yzm");//验证码
			String uskd =  Struts2Utils.getParameter("uskd");//uskd账号
			String password =  Struts2Utils.getParameter("password");//一级密码
			String paypassword = Struts2Utils.getParameter("paypassword");//二级密码
			String province =  Struts2Utils.getParameter("province");//省
			String city =  Struts2Utils.getParameter("city");//市
			String county =  Struts2Utils.getParameter("county");//区
			String idCard =  Struts2Utils.getParameter("idCard");//身份证号码
			String up_picture_front =  Struts2Utils.getParameter("up_picture_front");//身份证正面照
			String up_picture_reverse =  Struts2Utils.getParameter("up_picture_reverse");//身份证反面照
			Code code=GetAllFunc.telcode.get(tel); 
			System.out.println("手机验证码---》"+code.getCode());
			if (code!=null&&code.getCode().equals(yzm)) {
				if(DateUtil.checkbig(DateUtil.addMinute(code.getCreatedate(),10))) {
					DBObject db = basedao.getMessage(PubConstants.USER_INFO, fromUserid);
					if(db != null){
						UserInfo user = (UserInfo) UniObject.DBObjectToObject(db, UserInfo.class);
						user.setUserName(name);
						user.setTel(tel);
						user.setAccount(tel);
						user.setUskd(uskd);
						user.setPassword(password);
						if(StringUtils.isNotEmpty(paypassword) && !paypassword.equals("")){
							System.out.println("paypassword--->"+paypassword);
							//支付密码进行加密
							String salt = PBKDF2Util.generateSalt();
							user.setSalt(salt);
							String ciphertext = PBKDF2Util.getEncryptedPassword(paypassword, salt);
							System.out.println("加密的密码---->"+ciphertext);
							user.setPaypassword(ciphertext);
						}
						user.setId_card(idCard);
						user.setProvince(province);
						user.setCity(city);
						user.setCounty(county);
						user.setId_card_front(up_picture_front);
						user.setId_card_reverse(up_picture_reverse);
						user.setIsfull(1);//用户信息已完善
						System.out.println("--1--?"+user.getIsfull());
						basedao.insert(PubConstants.USER_INFO, user);
						sub_Map.put("state", 0);//修改成功
					}
				}else {
					sub_Map.put("state", 4);//验证码超时
				}
				
			}else {
				sub_Map.put("state", 3);//验证码有误
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			sub_Map.put("state", 1);
			e.printStackTrace();
		}
	  	String json = JSONArray.fromObject(sub_Map).toString();
		Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	}
	
	/**
	 * 获取用户
	 */
	public void findRecommend(){
		getLscode();
		String no = Struts2Utils.getParameter("no");
		HashMap<String, Object> whereMap=new HashMap<>();
		Map<String, Object> sub_map = new HashMap<String, Object>();
		String fromno = wwzservice.getVipNo(fromUserid);
		
		if(null == no || "".equals(no)) {
			whereMap.put("_id", fromUserid);
			DBObject db = basedao.getMessage(PubConstants.USER_INFO, whereMap);
			UserInfo user = (UserInfo) UniObject.DBObjectToObject(db, UserInfo.class);
			sub_map.put("user", user);
		}else {
			if(!no.equals(fromno)) {
				String userid = wwzservice.getfromUseridVipNo(no);
				DBObject db = basedao.getMessage(PubConstants.USER_INFO, userid);
				if(null!=db) {
					UserInfo user = (UserInfo) UniObject.DBObjectToObject(db, UserInfo.class);
					sub_map.put("user", user);	
				}else {
					sub_map.put("user", null);
				}
			}else {
				sub_map.put("user", null);
			}
		}
		
		String json = JSONArray.fromObject(sub_map).toString();
		Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	}
	
	/**
	 * 个人安全
	 */
	public String safePwd()throws Exception{
		getLscode();
		Struts2Utils.getRequest().setAttribute("custid", custid);
		Struts2Utils.getRequest().setAttribute("lscode", lscode);
		Struts2Utils.getRequest().setAttribute("url", Struts2Utils.getParameter("url"));
		HashMap<String, Object> whereMap=new HashMap<>();
		whereMap.put("_id", fromUserid);
		DBObject db = basedao.getMessage(PubConstants.USER_INFO, whereMap);
		UserInfo user = (UserInfo) UniObject.DBObjectToObject(db, UserInfo.class);
		Struts2Utils.getRequest().setAttribute("user", user);
		return "safePwd";
	}
	
	/**
	 * ajax 个人安全  密码修改
	 */
	public void ajaxsafePwd()throws Exception{
		getLscode();
		Map<String, Object> sub_Map=new HashMap<String, Object>();
		String oldPwd = Struts2Utils.getParameter("oldPwd");
		String newPwd = Struts2Utils.getParameter("newPwd");
		HashMap<String, Object> whereMap=new HashMap<>();
		whereMap.put("_id", lscode);
		DBObject db = basedao.getMessage(PubConstants.USER_INFO, whereMap);
		UserInfo user = (UserInfo) UniObject.DBObjectToObject(db, UserInfo.class);
		if(user!=null) {
			String loginpasswd =user.getPassword();
			//判断旧密码是否输入正确
			if(oldPwd.equals(loginpasswd)) {
				user.setPassword(newPwd);
				basedao.insert(PubConstants.USER_INFO, user);
				sub_Map.put("state", 1);//修改成功
			}else {
				sub_Map.put("state", 0);//旧密码错误
			}
			
		}
		String json = JSONArray.fromObject(sub_Map).toString();
		Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	}
	
	/**
	 * 用户关系  2层
	 */
	public String nexus()throws Exception{
		getLscode();
		Struts2Utils.getRequest().setAttribute("custid", custid);
		Struts2Utils.getRequest().setAttribute("lscode", lscode);
		return "nexus";
	}
	
	/**
	 * 用户关系  2层
	 */
	public void ajaxnexus()throws Exception{
		getLscode();
		Map<String, Object>sub_Map=new HashMap<String, Object>();
		HashMap<String, Object>sortMap = new HashMap<>();
		sortMap.put("createdate", -1);
		if(StringUtils.isNotEmpty(Struts2Utils.getParameter("fypage"))){
			fypage=Integer.parseInt(Struts2Utils.getParameter("fypage"));
		}
		List<Object> userInfoList = new ArrayList<Object>();
		try {
			
			    DBObject   user=wwzservice.getWxUser(fromUserid);
			    HashMap<String, Object>whereMap=new HashMap<>(); 
				Map<String, Object>sub_Map1=new HashMap<String, Object>();
				whereMap.clear();
				whereMap.put("_id", SysConfig.getProperty("custid"));
				DBObject db = basedao.getMessage(PubConstants.INTEGRAL_INTESETTING, whereMap);
				InteSetting sett=null;
				if(db!=null){
					sett = (InteSetting) UniObject.DBObjectToObject(db, InteSetting.class);
				}
				UserInfo  info=(UserInfo) UniObject.DBObjectToObject(user, UserInfo.class);
				Long number = info.getNumber();//用户的编号
				whereMap.clear();
				whereMap.put("no", info.getRenumber().toString());
				DBObject upUser = basedao.getMessage(PubConstants.USER_INFO, whereMap);
				
				results="0";
				user.put("xsyj",getResults(number));
				sub_Map1.put("user", user);
				whereMap=new HashMap<>();
				whereMap.put("renumber", number);
				
				List<DBObject>list1=basedao.getList(PubConstants.USER_INFO, whereMap,fypage,10000, sortMap);
				List<Object> userInfoList1 = new ArrayList<Object>();
				for(int j=0;j<list1.size();j++) {
					Map<String, Object>sub_Map2=new HashMap<String, Object>();
					UserInfo  info1=(UserInfo) UniObject.DBObjectToObject(list1.get(j), UserInfo.class);
					Long number1 = info1.getNumber();//用户的编号
					results="0";
					String  dljg="0";
					if(sett!=null){
						if(info1.getAgentLevel()==1){
							//省
							dljg=BaseDecimal.add(dljg, sett.getReturnProvince()+"");
						}else if(info1.getAgentLevel()==2){
							//市
							dljg=BaseDecimal.add(dljg, sett.getReturnCity()+""); 
						}else if(info1.getAgentLevel()==3){
							//县
							dljg=BaseDecimal.add(dljg, sett.getReturnCounty()+"");
						}else if(info1.getAgentLevel()==4){
							//部门
							dljg=BaseDecimal.add(dljg, sett.getReturnDept()+"");
						}
					}
					list1.get(j).put("xsyj",BaseDecimal.add(getResults(number1),dljg)); 
					sub_Map2.put("user", list1.get(j));
					whereMap=new HashMap<>();
					whereMap.put("renumber", number1);
					
					List<DBObject>list2=basedao.getList(PubConstants.USER_INFO, whereMap,fypage,10, sortMap);
					
					sub_Map2.put("son", list2);
					userInfoList1.add(sub_Map2);
				}
				sub_Map1.put("son", userInfoList1);
				sub_Map1.put("upUser", upUser);
				userInfoList.add(sub_Map1);
				//sub_Map.put("userinfo", sub_Map1);
		 
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	  	String json = JSONArray.fromObject(userInfoList).toString();
	  	Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
		//Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]);
	}
	 
	public void testdg()throws Exception{
		getLscode();
		Map<String, Object>sub_Map=new HashMap<String, Object>();
		String id=Struts2Utils.getParameter("id");
		sub_Map.put("state", 1);
		if(StringUtils.isNotEmpty(id)){
			results="0";
			String str=getResults(Long.parseLong(id));
			sub_Map.put("state", 0);
			sub_Map.put("value", str);
		}
	  	String json = JSONArray.fromObject(sub_Map).toString();
	  	Struts2Utils.renderJson(json.substring(1, json.length() - 1), new String[0]); 
	}
	/**
	 * 统计业绩
	 * @param fromid
	 * @return
	 */
	public  String getResults(Long  vip_no){
		HashMap<String,Object>whereMap=new HashMap<>();
		whereMap.put("renumber", vip_no);
		List<DBObject>list=basedao.getList(PubConstants.USER_INFO, whereMap, null);
		System.out.println(list.size()); 
		System.out.println("*************");
		//统计自身业绩 
		whereMap.clear();
		whereMap.put("_id", SysConfig.getProperty("custid"));
		DBObject db = basedao.getMessage(PubConstants.INTEGRAL_INTESETTING, whereMap);
		InteSetting sett=null;
		if(db!=null){
			sett = (InteSetting) UniObject.DBObjectToObject(db, InteSetting.class);
		}
		
		if(list.size()==0){
			 
		}else{
			for (DBObject dbObject : list) {
				Long number =Long.parseLong(dbObject.get("no").toString());//用户的编号
				
				if(dbObject.get("agentLevel")!=null){
					System.out.println("////"+dbObject.get("agentLevel"));
					int level=Integer.parseInt(dbObject.get("agentLevel").toString());
					//统计本身业绩
					System.out.println(sett);
					if(sett!=null){
						if(level==1){
							//省
							results=BaseDecimal.add(results, sett.getReturnProvince()+"");
						}else if(level==2){
							//市
							results=BaseDecimal.add(results, sett.getReturnCity()+"");
							System.out.println(results);
							System.out.println(sett.getReturnCity());
						}else if(level==3){
							//县
							results=BaseDecimal.add(results, sett.getReturnCounty()+"");
						}else if(level==4){
							//部门
							results=BaseDecimal.add(results, sett.getReturnDept()+"");
						}
					}
					//统计订单业绩
					whereMap.clear();
					whereMap.put("fromUserid",dbObject.get("_id").toString());
					whereMap.put("state", 4);
					List<DBObject>orderlist=basedao.getList(PubConstants.WX_ORDERFORM, whereMap,null);
					for (DBObject dbObject2 : orderlist) {
						results=BaseDecimal.add(results,dbObject2.get("contri_money").toString());
					}
					 
					
				} 
				getResults(number);
			}
		} 
		return results; 
	}


}
